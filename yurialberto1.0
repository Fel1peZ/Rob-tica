//Componentes: Ponte H L298D e sensor InfraRed
//Programador: Evandro Cantu
 
//Veriáveis para sensores de linha e velocidade
int     sensorEsq, sensorLinha, sensorDir;
int     velMin = 120, velMed = 180, velMax = 240; //Velocidades dos motores
int     limiar = 500; //limiar do sensor de luz
int     ultimaBranca = 0;// verificar o ultimo sensor que passou a linha branca
//Variáveis para sensores de início e fim de pista
int     sensorFim;
int     contaFim = 4; //Conta marcas de início, fim e cruzamentos
boolean flagFim = false; 
long    tempoTotal; //Tempo total da volta
long    tempoExtra = 2000; //Tempo extra para seguir linha


//Definicoes pinos Arduino ligados a entrada da Ponte H
int IN1 = 4;
int IN2 = 5;
int IN3 = 8; //isso aqui faz alguma coisa
int IN4 = 9;
int  MA = 3; //Motor direito
int  MB = 10; //Motor esquerdo

void setup(){
   
  
  //Define os pinos como saida  
  pinMode(IN1, OUTPUT);  
  pinMode(IN2, OUTPUT);  
  pinMode(IN3, OUTPUT);  
  pinMode(IN4, OUTPUT);
  pinMode(MA,  OUTPUT);  
  pinMode(MB,  OUTPUT);  
  
}

void para_frente(int vel) {
  //Configura velocidade dos motores
  analogWrite(MA, vel);   
  analogWrite(MB, vel);   
  //Aciona o motores 
  digitalWrite(IN1, LOW);  //A 
  digitalWrite(IN2, HIGH); //A
  digitalWrite(IN3, LOW);  //B
  digitalWrite(IN4, HIGH); //B   
  Serial.println("indo para frente");
}

void vira_esquerda(int vel) {
  //MotorA_frente
  analogWrite(MA, vel);
  digitalWrite(IN1, LOW);  //A 
  digitalWrite(IN2, HIGH); //A  
  //MotorB_tras 
  analogWrite(MB, vel);   
  digitalWrite(IN3, HIGH); //B
  digitalWrite(IN4, LOW);  //B   
  Serial.println("indo para esquerda");
}

void vira_direita(int vel) {
  //MotorA_tras
  analogWrite(MA, vel);
  digitalWrite(IN1, HIGH);  //A 
  digitalWrite(IN2, LOW); //A  
  //MotorB_frente 
  analogWrite(MB, vel);   
  digitalWrite(IN3, LOW); //B
  digitalWrite(IN4, HIGH);  //B   
  Serial.println("indo para direita");
}

void para_motores() {
  //MotorA_para
  digitalWrite(IN1, HIGH);  //A 
  digitalWrite(IN2, HIGH);  //A  
  //MotorB_para 
  digitalWrite(IN3, HIGH);  //B
  digitalWrite(IN4, HIGH);  //B   
}

void ultima_branca(){
  if(sensorEsq > limiar){
    ultimaBranca = 1;
  }
  if(sensorDir > limiar){
    ultimaBranca = 2;
  }
  if(sensorLinha > limiar){
    ultimaBranca = 3;
  }
}

void segueLinha(){      

  //le os sensores
  sensorDir   = analogRead(2); 
  sensorLinha = analogRead(1); //1
  sensorEsq   = analogRead(0);
  //sensorFim   = analogRead(3);

  //Se estiver na linha segue em frente 
  if (sensorLinha > limiar || (sensorDir > limiar && sensorEsq > limiar)){
    para_frente(velMin);    
  }
 
  //Se sensorDir acha linha vire para a direita
  if (sensorDir < limiar && sensorLinha < limiar){
    vira_direita(velMin);
  }
 
  //Se sensorEsq acha linha vire para a esquerda
  if (sensorEsq < limiar && sensorLinha < limiar){
    vira_esquerda(velMin);
  }

  if (sensorEsq < limiar && sensorLinha < limiar && sensorDir < limiar){
    ultima_branca();
    if(ultimaBranca == 1){
      vira_direita(velMin);
    }
    else if(ultimaBranca == 2){
      vira_esquerda(velMin);
    }
    else if(ultimaBranca == 3){
      para_frente(velMin);
    }
    

  }

  if (sensorEsq > limiar && sensorLinha > limiar && sensorDir > limiar){
    para_frente(velMin);

  }
  

}
 
void loop(){
  //Segue linha até encontrar marca de fim de pista
  while(contaFim > 0){
    segueLinha();
    if (sensorFim < limiar)
       flagFim = true; 
    if (sensorFim > limiar && flagFim == true){
       flagFim=false;
       contaFim--;
    }
  }

 //Segue linha por mais 2 segundos antes de parar
 tempoTotal = millis();
 while((millis() - tempoTotal) < tempoExtra)
   segueLinha();

 //Pára motores
 para_motores();

 //Espera 10s
 delay(10000);
 }
